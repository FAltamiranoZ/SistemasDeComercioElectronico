En este pequeño documento se trata de las instrucciones que hay que agregar al código de las "Facade" de los Entity Beans de EJB para habilitarlos para llevar a cabo consultas con las funciones "FindByAtributo" que contiene el Entity Bean.

1) El Entity Bean Genera un conjunto de consultas conocidas como "Named Queries", uno para cada atributo de Bean de entidad, por ejemplo, para un bean asociado a una tabla con nombre "CATEGORY", con dos atributos, id (entero con rol de identidad) y name (char (...) o Varchar(...) ) el inyector de código va a generar los siguientes Named Queries:

---------------------------------------------------------------------------------------
 @Entity
@Table(name = "CATEGORY")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Category.findAll", query = "SELECT c FROM Category c")
    , @NamedQuery(name = "Category.findById", query = "SELECT c FROM Category c WHERE c.id = :id")
    , @NamedQuery(name = "Category.findByName", query = "SELECT c FROM Category c WHERE c.name = :name")})
public class Category implements Serializable { ...

---------------------------------------------------------------------------------------
2) Por otro lado, el generador del bean de sesión para el bean de entidad solamente genera la funcionalidad para trabajar con las partes "generales" de los beans de entidad y lo deja en el AbstractFacade.java:
---------------------------------------------------------------------------------------
package interfaces;

import java.util.List;
import javax.persistence.EntityManager;

/**
 *
 * @author rggh
 */
public abstract class AbstractFacade<T> {

    private Class<T> entityClass;

    public AbstractFacade(Class<T> entityClass) {
        this.entityClass = entityClass;
    }

    protected abstract EntityManager getEntityManager();

    public void create(T entity) {
        getEntityManager().persist(entity);
    }

    public void edit(T entity) {
        getEntityManager().merge(entity);
    }

    public void remove(T entity) {
        getEntityManager().remove(getEntityManager().merge(entity));
    }

    public T find(Object id) {
        return getEntityManager().find(entityClass, id);
    }

    public List<T> findAll() {
        javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery();
        cq.select(cq.from(entityClass));
        return getEntityManager().createQuery(cq).getResultList();
    }

    public List<T> findRange(int[] range) {
        javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery();
        cq.select(cq.from(entityClass));
        javax.persistence.Query q = getEntityManager().createQuery(cq);
        q.setMaxResults(range[1] - range[0] + 1);
        q.setFirstResult(range[0]);
        return q.getResultList();
    }

    public int count() {
        javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery();
        javax.persistence.criteria.Root<T> rt = cq.from(entityClass);
        cq.select(getEntityManager().getCriteriaBuilder().count(rt));
        javax.persistence.Query q = getEntityManager().createQuery(cq);
        return ((Long) q.getSingleResult()).intValue();
    }

}

---------------------------------------------------------------------------------------
3) Para habilitar el uso del resto de los FindBy... agregamos para cada uno de ellos el siguiente código en la fachada del bean de entidad:

---------------------------------------------------------------------------------------   
    public java.util.List<Category> findByName(String nombre)
    {
        em = getEntityManager();
        TypedQuery<Category> queryCatByName = em.createNamedQuery("Category.findByName", Category.class);
        queryCatByName.setParameter("name", nombre);
        java.util.List<Category> lista= queryCatByName.getResultList();

        return lista;
    }
---------------------------------------------------------------------------------------
Notas:

3.1) El tipo de dato de retorno lo tomamos del método FindAll() (ver el AbtractFacade.java para ver de qué tipo es la colección recuperada), sustituiyendo el diamante por la clase correspondiente, en este caso CATEGORY

3.2) Al agregar el tipo de dato "TypedQuery" se requiere la importación del paquete que lo contiene (el netbeans lo solicita) vía

import javax.persistence.TypedQuery;

4) Para agregarlo en un web service copiar el webMethod del FindAll y adaptarlo a la funcionalidad del FindBy...(...)

--------------------------------------------------------------------------------------- 
    @WebMethod(operationName = "findByName")
    public List<Category> findByName(@WebParam(name = "nombre") String nombre) {
        return ejbRef.findByName(nombre);
    }
---------------------------------------------------------------------------------------

Fin de las instrucciones






     